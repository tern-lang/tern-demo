// https://leetcode.com/problems/increasing-triplet-subsequence/

assert increasingTriplet([4,5,2147483647,1,2]);
assert increasingTriplet([20,100,10,12,5,13]);
assert increasingTriplet([1,2,3,4,5]);
assert !increasingTriplet([5,4,3,2,1]);

func increasingTriplet(const nums) {
   let maxNums = [];
   let minNums = [];
   let min = null;
   let max = null;
   
   for(let i = 0; i < nums.length; i++) {
      if(min == null) {
         min = nums[i];
      } else {
         min = Math.min(min, nums[i]);
      }
      minNums[i] = min;
      maxNums[i] = null;
   }
   for(let i = nums.length - 1; i >= 0; i--) {
      if(max == null) {
         max = nums[i];
      } else {
         max = Math.max(max, nums[i]);
      }
      maxNums[i] = max;
   }
   println(minNums);
   println(maxNums);
   
   for(let i = 1; i < nums.length -1; i++) {
      let currMin = minNums[i - 1];
      let currMax = maxNums[i + 1];
      
      if(currMin < nums[i] && nums[i] < currMax) {
         return true;
      }
   }
   return false;
}

/*
class Solution {
    public boolean increasingTriplet(int[] nums) {
       int[] maxNums = new int[nums.length];
       int[] minNums = new int[nums.length];
       int min = nums[0];
       int max = nums[nums.length - 1];

       for(int i = 0; i < nums.length; i++) {
          min = Math.min(min, nums[i]);
          minNums[i] = min; 
       }
       for(int i = nums.length - 1; i >= 0; i--) {
          max = Math.max(max, nums[i]);          
          maxNums[i] = max;
       }
       for(int i = 1; i < nums.length -1; i++) {
          int currMin = minNums[i - 1];
          int currMax = maxNums[i + 1];

          if(currMin < nums[i] && nums[i] < currMax) {
             return true;
          }
       }
       return false;
    }
}
*/