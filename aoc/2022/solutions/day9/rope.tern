#!/usr/bin/env tern

import solutions.Fetch;

println(plot(2));
println(plot(10));

func plot(s) {
   const r = Rope(s);
   const m = r::move;
   
   Fetch.lines(9)
      .stream()
      .map(_.split(" "))
      .forEach(m(_[0], _[1].toInteger()));
   
   return r.s.size;
}

class Rope {
   const k: List<Pos>;
   const s = {};

   new(length) {
      this.k = [].fill(length)(Pos(10 ^ 5, 10 ^ 5));
   }
   
   move(d: String, c: Integer) {
      for(i in 1 to c) {
         k[0] = k[0].move(d);
         
         for(j in 1 to k.length - 1) {
            k[j] = k[j].follow(k[j -1]);
         }
         s.add("${k[k.length-1]}");
      }
   }
}

class Pos(x, y) {
  
  move(d: String) {
    match(d) {
      case 'U': Pos(x,  y - 1);
      case 'D': Pos(x, y + 1);
      case 'L': Pos(x - 1, y);
      case 'R': Pos(x + 1, y);
    }  
  }
  
  follow(p: Pos) {
     const dx = Math.abs(x - p.x);
     const dy = Math.abs(y - p.y);
     
     if(dx + dy > 3) return Pos(x > p.x ? p.x + 1 : p.x- 1, y > p.y ? p.y + 1 : p.y- 1);
     if(dy > 1) return Pos(p.x, y > p.y ? p.y + 1 : p.y- 1);
     if(dx > 1) return Pos(x > p.x ? p.x + 1 : p.x- 1, p.y);        
        
     return this; // no move
  }

  toString() {
     "${x}, ${y}";
  }
}