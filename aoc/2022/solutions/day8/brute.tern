#!/usr/bin/env tern

import solutions.Fetch;

const g = Fetch.ints(8);

func max(g) {
   const q = PriorityQueue((a,b) -> Integer.compare(b,a));
   const w = g[0].length;
   const h = g.length;
   
   for(r in 1 to g.length -2){
      for(c in 1 to g[r].length -2){
         q.offer(dist(g, r, c));
      }
   }
   q.peek();
}

func dist(g, r, c) {
   let val = g[r][c];
   let up = 0;
   let dn = 0;
   let lt = 0;
   let rt = 0;
   
   for(let i = r + 1; i < g.length; i++) {
      dn++;
      if(g[i][c] >= val) break;
   }
   for(let i = r - 1; i >= 0; i--) {
      up++;   
      if(g[i][c] >= val) break;
   } 
   for(let i = c + 1; i < g[r].length; i++) {
      rt++;
      if(g[r][i] >= val) break;
   }
   for(let i = c - 1; i >= 0; i--) {
      lt++;
      if(g[r][i] >= val) break;
   } 
   return up * dn * lt * rt;
}

println(max(g));

