import text.DateFormat;
import text.SimpleDateFormat;

class Invoice {

   const invoiceFormat: DateFormat;
   const timeSheet: TimeSheet;
   const company: Company;
   const currentDate: Date;
   
   new(company: Company, timeSheet: TimeSheet) {
      this.invoiceFormat = new SimpleDateFormat("MMM d, yyyy");   
      this.currentDate = new Date();
      this.timeSheet = timeSheet;
      this.company = company;
   }
   
   buildDocument() {
      let table = buildTable();
      let invoiceNumber = timeSheet.getInvoiceNumber();
      let invoiceDate = invoiceFormat.format(currentDate);      
      
      return "<html>
      <head>
          <script type='text/javascript'>
              (function() {
                  let link_element = document.createElement('link'),
                      s = document.getElementsByTagName('script')[0];
                  if (window.location.protocol !== 'http:' && window.location.protocol !== 'https:') {
                      link_element.href = 'http:';
                  }
                  link_element.href += '//fonts.googleapis.com/css?family=Droid+Sans:400,700';
                  link_element.rel = 'stylesheet';
                  link_element.type = 'text/css';
                  s.parentNode.insertBefore(link_element, s);
              })();
          </script>
          <script type='text/javascript'>
              (function() {
                  let link_element = document.createElement('link'),
                      s = document.getElementsByTagName('script')[0];
                  if (window.location.protocol !== 'http:' && window.location.protocol !== 'https:') {
                      link_element.href = 'http:';
                  }
                  link_element.href += '//fonts.googleapis.com/css?family=Asap:400italic,400,700italic,700';
                  link_element.rel = 'stylesheet';
                  link_element.type = 'text/css';
                  s.parentNode.insertBefore(link_element, s);
              })();
          </script>
          <style>
            body {
            	font-family: 'Droid Sans', sans-serif;
            	font-weight: 400;
            	font-size: 14px;
            	color: #666;
            }
            
            h1, h2, h3, h4, h5, h6 {
            	font-family: 'Asap', sans-serif !important;
            	font-weight: 700 !important;
            	color: #666;
            	margin: 0;
            	padding: 0;
            }
          </style>
      </head>
      <body style='width: 800px;'>
      <div style='padding: 40px;'>
         <img src='./logo.png'>
         <center>
            <h1>Invoice</h1>
         </center>
         <br>
         <br>
         <table width='100%'>
            <tr>
               <td valign='top'>
                  <p>
                     ${formatAddress(company.companyAddress)}<br>
                  </p>   
               </td>
               <td valign='top' align='right'>
                  <table>
                     <tr>
                        <td><b>Invoice Number:</b></td>
                        <td align='right'>${invoiceNumber}</td>
                     </tr>
                     <tr>
                        <td><b>Invoice Date:</b></td>
                        <td align='right'>${invoiceDate}</td>
                     </tr>
                  </table>
               </td>
            </tr>
         </table>
         <hr>
         ${table}
         <hr>
         <table cellpadding='10'>
            <tr valign='top'>
               <td><b>Invoice to:</b></td>
               <td>${formatAddress(company.agent.agentAddress)}</td>
            </tr>
            <tr valign='top'>
               <td><b>Terms:</b></td>
               <td>Payment is due within 30 days of receipt of this invoice</td>
            </tr>
            <tr valign='top'>
               <td><b>Description:</b></td>
               <td>For Consultancy Services provided by: ${company.companyName}</td>
            </tr>
         </table>     
         <hr>         
         <table cellpadding='10'>
            <tr>
               <td><b>Payment options:</b></td>
               <td>Please transfer funds directly to the account listed below</td>
            </tr>
            <tr>
               <td><b>Account name:</b></td>
               <td>${company.bankAccount.accountName}</td>
            </tr>
            <tr>
               <td><b>Account number:</b></td>
               <td>${company.bankAccount.accountNumber}</td>
            </tr>
            <tr>
               <td><b>Sort code:</b></td>
               <td>${company.bankAccount.sortCode}</td>
            </tr>     
         </table>
         <p style='text-align: center;'>
            ${company.companyName} registered in the United Kingdom No: ${company.registrationNumber}<br>
            VAT Regstriation No: ${company.vatNumber}
         </p>
      </div>
      </body>";
   }

   buildTable() {
      let builder = StringBuilder("
         <table cellpadding='10'>
            <tr>
               <td><b>Description</b></td>
               <td><b>Units</b></td>
               <td><b>Rate</b></td>
               <td><b>Net</b></td>    
               <td><b>VAT (${company.account.formatVat()})</b></td> 
               <td><b>Gross</b></td>
            </tr>");
        
      let description = timeSheet.getDescription();      
      //let weeks = timeSheet.weeks;            
      // let firstWeek = weeks[0];
      // let lastWeek = weeks[weeks.length - 1];      
      // let firstDate = firstWeek.days[0].getDate();
      // let lastDate = lastWeek.days[lastWeek.days.length -1].getDate();
      // let dateRange = "${firstDate} - ${lastDate}";
      let vatPercentage = company.account.formatVat();
      let totalDays = timeSheet.calculateDays();      
      let gross = company.account.calculateGross(totalDays);
      let net = company.account.calculateNet(totalDays);
      let vat = company.account.calculateVat(totalDays);
      
      builder.append("
         <tr>
            <td><b>${description}</b></td>
            <td>${totalDays}</td>
            <td>${company.account.dailyRate}</td>
            <td>${net}</td>
            <td>${vat}</td>
            <td>${gross}</td>
         </tr></table>");

      return builder.toString();
   }
   
   private formatAddress(address) {
      let formattedAddress = address.replace("\n", "<br>");
      return formattedAddress;
   }
}